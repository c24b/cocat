# file: routers.py
# autogenerated by Model.build_router()
import json
from pydantic import constr, ValidationError

from fastapi import APIRouter, Body, Request, HTTPException, status, Query
from fastapi.responses import JSONResponse, Response
from fastapi.encoders import jsonable_encoder
from typing import Optional, List, Union, Set, Dict
#from apps.services.db import DB
{{import_models}}
{{import_external_models}}

router = APIRouter()

{%if multilang %}
@router.get("/", response_description="Get {{model_name}} list", response_model=List[{{model_name}}], status_code=200)
async def get_{{model_name}}_list(skip: int = 0, limit: int = 100, lang: constr(regex="^(fr|en)$") = "fr"):
    """display list of {{model_name}} given the specified lang default to french (fr)"""
    model_multilang_docs = await {{model_name}}.find_all().skip(skip).limit(limit).to_list()
    model_docs = []
    for model_doc in model_multilang_docs:
        model_lang = model_doc.__dict__[lang]
        model_lang["lang"] = lang
        model_docs.append({{model_name}}(**model_lang))
    return model_docs


@router.get("/<id>", response_description="Get {{model_name}} item given id and lang", response_model={{model_name}}, status_code=200)
async def get_{{model_name}}_item(id=str, lang := constr(regex="^(fr|en)$")="fr"):
    model_multilang_doc = await {{model_name}}.get(id)
    if model_multilang_doc is None:
        raise HTTPException(status_code=404, detail="Item not found")
    model_lang = model_multilang_doc.__dict__[lang]
    model_lang["lang"] = lang
    return {{model_name}}(**model_lang)

@router.delete("/<id>", response_description="Delete {{model_name}} item given id", response_model={{model_name}}, status_code=204)
async def delete_{{model_name}}_item(id=str):
    model_multilang_doc = await {{model_name}}.get(id)
    if model_multilang_doc is None:
        raise HTTPException(status_code=404, detail="Item not found")
    model_multilang_doc.delete()
    #index
    return Response(status_code= status.HTTP_204_NO_CONTENT)

@router.post("/", response_description="Add a new {{model_name}} item given lang", response_model={{model_name}}, status_code=201)
async def create_{{model_name}}(model: {{model_name}}, lang := constr(regex="^(fr|en)$")="fr"):
    new_doc = {lang: model}
    #translate
    new_multilang_doc = translate_doc(new_doc)
    #index
    index_doc(new_multilang_doc)
    new_model = await {{model_name}}Multilang(**new_multilang_doc).create()
    return JSONResponse(new_multilang_doc, status_code=status.HTTP_201_CREATED)

@router.post("/multiple", response_description="Add new multiple {{model_name}} item given lang", response_model=List[{{model_name}}], status_code=201)
async def add_multiple_{{model_name}}(models: list = List[{{model_name}}], lang := constr(regex="^(fr|en)$")="fr"):
    for model in models:
        new_doc = {lang: model}
        #translate
        new_multilang_doc = translate_doc(new_doc)
        #index
        index_doc(new_multilang_doc)
        new_model = await {{model_name}}Multilang(**new_multilang_doc).create()
    return JSONResponse(models, status_code=status.HTTP_201_CREATED)

@router.put("/<id>", response_description="Update {{model_name}} item given id and lang", response_model={{model_name}}, status_code=201)
async def update_{{model_name}}(id: str, model: {{model_name}}, lang : constr(regex="^(fr|en)$")="fr"):
    doc = await {{model_name}}.get(id)
    if doc is None:
        raise HTTPException(status_code=404, detail="Item not found")
    for key, value in model.items():
        doc[lang][key] = value 
    #update translation
    new_multilang_doc = translate_doc(new_doc)
    #update index
    delete_index_doc(doc)
    index_doc(new_multilang_doc)
    updated_doc  = await doc.save()
    return JSONResponse(updated_doc, status_code=status.HTTP_204_UPDATED)

{%endif%}